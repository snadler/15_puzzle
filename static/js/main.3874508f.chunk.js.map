{"version":3,"sources":["logo.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","DEBUG","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setOrderedBoard","e","state","board","i","board_size","push","nastyShuffleBoard","swaping_index","getRandomInt","swapSquares","shuffleBoard","white_square_index","pieces","validShuffleStep","indexToImageSlice","arr_index","arr_val","row","Math","floor","col","react_default","a","createElement","className","onClick","onClickHandler","style","backgroundImage","backgroundPositionX","backgroundPositionY","last_index","cnt","pow","neighbors","getNeighbors","neighbors_cnt","length","random_neighbor","setState","setTimeout","sqrt","min","max","ceil","random","j","temp","moveSquare","index","empty_square_index","findEmptySquare","areNeighbors","alert","isFinished","includes","click_count","render_row","row_num","row_buttons","render_board","rows","is_cheating","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.3874508f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n\nconst DEBUG = false;\n\nclass App extends Component {\n\n  constructor() {\n\t  super()\n\t  this.state = {\n      board_size : 4, // 3-6 (let user choose 4 levels)\n      board : [],\n      click_count : 0,\n      is_cheating : false, // set a hidden button to choose whether to use a true shuffeling or the nasty one\n      pieces: 0,\n    }\n    \n    this.state.pieces = Math.pow(this.state.board_size, 2) - 1;\n    // this.nastyShuffleBoard(); // In that case we might not have a solution (look in https://en.wikipedia.org/wiki/15_puzzle#Solvability)\n    this.setOrderedBoard();\n    setTimeout(this.shuffleBoard, 1000);\n    // this.shuffleBoard();\n  }\n\n  setOrderedBoard = (e) => {\n    this.state.board = []\n    // Creating an array with values (1 : board_size^2 -1)\n    for(let i = 1; i < this.state.board_size * this.state.board_size; ++i) {\n      this.state.board.push(i);\n    }\n\n    this.state.board.push(0)\n  }\n  \n  nastyShuffleBoard = (e) => {\n\n    this.setOrderedBoard()\n    \n    // shuffeling the array\n    for(let i = this.state.board_size * this.state.board_size - 2; i > 0 ; --i) {\n      let swaping_index = this.getRandomInt(0,i)\n      if (swaping_index === i) {\n        continue\n      } \n      else {\n        this.swapSquares(i, swaping_index)\n      }\n    }\n  }\n\n\n  shuffleBoard = (e) => {\n    this.setOrderedBoard()\n    let right_bottom_corner_idx =this.state.pieces;\n    let white_square_index = right_bottom_corner_idx\n    \n    let cnt = 0;\n    this.validShuffleStep(white_square_index, -1, cnt);\n  }\n\n  indexToImageSlice = (arr_index, arr_val) => {\n    const row = Math.floor((arr_val - 1) / this.state.board_size);\n    const col = (arr_val - 1) % this.state.board_size;;\n    \n    if (!arr_val) {\n      return (\n        <button className='square-button' onClick={() => this.onClickHandler(arr_index)}>  \n        </button>\n      )\n    }\n    return (\n      <button className='square-button' onClick={() => this.onClickHandler(arr_index)}\n        style={{\n          backgroundImage: \"url('./ultimate_fighter.JPG')\",\n          backgroundPositionX: 800 - 200 * col,\n          backgroundPositionY: 800 - 200 * row,\n          }}> \n          {DEBUG && arr_val}\n      </button>\n    )\n\n  }\n\n  validShuffleStep = (white_square_index, last_index, cnt) => {\n    if (white_square_index ===  this.state.pieces && cnt > Math.pow(10, this.state.board_size - 1)/2) {\n      return;\n    }\n    let neighbors = this.getNeighbors(white_square_index);\n    let neighbors_cnt = neighbors.length;\n    let random_neighbor = -1;\n    do {\n      random_neighbor = this.getRandomInt(0,neighbors_cnt-1);\n    }\n    while (neighbors[random_neighbor] == last_index);\n    this.swapSquares(white_square_index, neighbors[random_neighbor]);\n    this.setState({board: this.state.board});\n\n    setTimeout(() => this.validShuffleStep(neighbors[random_neighbor], white_square_index ,++cnt)  , 800/Math.sqrt(Math.pow(1.3,cnt)));\n  }\n\n\n\n  getRandomInt = (min, max) => {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n\n  swapSquares = (i,j) => {\n    let temp = this.state.board[i];\n    this.state.board[i] = this.state.board[j];\n    this.state.board[j] = temp;\n\n  }\n\n  moveSquare = (index) => {\n    // Finding where the empty square is:\n    let empty_square_index = this.findEmptySquare();\n\n    if (this.areNeighbors(index, empty_square_index)) {\n      this.swapSquares(index, empty_square_index);\n      this.setState({board: this.state.board})\n    }\n    else {\n      alert(\"Tipeshhhh!!!\");\n    }\n\n    if (this.isFinished()) {\n      alert(\"Boom!!!\")\n    }\n  }\n  \n  findEmptySquare = (e) => {\n    let empty_square_index = -1;\n    let board_size = this.state.board_size;\n    for (let i= 0; i < board_size * board_size; ++i) {\n      if (this.state.board[i] === 0) {\n        empty_square_index = i;\n        break;\n      }\n    }\n    \n    return empty_square_index;\n  }\n\n  // gets array with all nrighbors (square we can move to) for index i\n  getNeighbors = (i) => {\n    // Gather i neighbors\n    let neighbors = []\n    let row = Math.floor(i / this.state.board_size)\n    let col = i % this.state.board_size\n    if (row > 0) {\n      neighbors.push(i-this.state.board_size)\n    }\n    if (row < this.state.board_size - 1) {\n      neighbors.push(i + this.state.board_size)\n    }\n    if (col > 0) {\n      neighbors.push(i-1)\n    }\n    if (col < this.state.board_size - 1) {\n      neighbors.push(i + 1)\n    }\n\n    return neighbors\n  }\n\n  // Checking whether or not two indexes are neighbors in board\n  areNeighbors = (i,j) => {\n    // Gather i neighbors\n    let neighbors = this.getNeighbors(i);\n    return neighbors.includes(j)\n  }\n\n  isFinished = (e) => {\n    let board_size = this.state.board_size; \n    for (let i= 0; i < board_size * board_size - 1; ++i) {\n      if (this.state.board[i] != i+1) {\n        return false\n      }\n    }\n\n    return true\n  }\n\n  onClickHandler = (arr_index) => {\n    this.state.click_count++;\n    this.moveSquare(arr_index)\n  }\n\n  render_row  = (row_num) =>  {\n    let row_buttons = []\n    for (let j = 0; j < this.state.board_size; j++) {\n      let arr_index = row_num * this.state.board_size + j;\n      let arr_val = this.state.board[arr_index] != 0 ? this.state.board[arr_index] : \"\";\n      row_buttons.push(this.indexToImageSlice(arr_index, arr_val));\n    }\n    return (\n      <div className='row'>\n        {row_buttons}\n      </div>\n    )\n  }\n\n  render_board = (row_num) =>  {\n    let rows = []\n    for (let j = 0; j < this.state.board_size; j++) {\n      rows.push(this.render_row(j))\n    }\n    return (\n      <div className='board'>\n        {rows}\n      </div>\n    )\n  }\n\n  render() {\n    return (\n      <div className='container'>\n        {this.render_board()}\n      </div>\n    );\n  }\n}\n\n\n\n\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}